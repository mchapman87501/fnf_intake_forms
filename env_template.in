# One can use `openssl rand -hex 32` to generate ...SECRETs

# For creating/signing JWT access tokens:
JWT_ACCESS_SECRET='SEKRIT'

# Token durations, in minutes:
# These are optional.  If they aren't defined, the server
# will use hardcoded default values.
JWT_ACCESS_DURATION=1

# Administrative account's unencrypted credentials:
ADMIN_USERNAME='admin'
ADMIN_PASSWORD='shhh!'

# Where to find the user account database.
USER_DB_PATH='./data/internal/users.db'

#-----------------------------------------------------------------------
# Outbound email server
SMTP_SERVER='smtp.gmail.com'
# Port on which to connect to server.  Port 465 is for SSL.
SMTP_PORT=465

# Authenticate to the server with this username.
# All outbound messages will be From: this address.
EMAIL_USERNAME=catperson@gmail.com
# and this password
EMAIL_PASSWORD='I have a secret'

# Addresses to which to send all new intake records --
# format as a comma-separated string
SURRENDER_EMAIL_RECIPIENTS='recipient1@fnf.org,recipient2@fnf.org'


#-----------------------------------------------------------------------
# Optional:  Serve insecure cookies even when running a production build.
#
# Browsers will send 'Secure' cookies only to a secure (https:) endpoint.
# Many browsers will also send 'Secure' cookies to insecure localhost
# (http://localhost/), but some will not.  This impedes testing when
# running the app inside a local docker container.
# To work around this, define PUBLIC_SET_INSECURE_SESSION_COOKIE with a value of 'true'.
PUBLIC_SET_INSECURE_SESSION_COOKIE='true'